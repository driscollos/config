// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/driscollos/config/internal/sourcer (interfaces: Sourcer)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSourcer is a mock of Sourcer interface.
type MockSourcer struct {
	ctrl     *gomock.Controller
	recorder *MockSourcerMockRecorder
}

// MockSourcerMockRecorder is the mock recorder for MockSourcer.
type MockSourcerMockRecorder struct {
	mock *MockSourcer
}

// NewMockSourcer creates a new mock instance.
func NewMockSourcer(ctrl *gomock.Controller) *MockSourcer {
	mock := &MockSourcer{ctrl: ctrl}
	mock.recorder = &MockSourcerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourcer) EXPECT() *MockSourcerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockSourcer) Get(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockSourcerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSourcer)(nil).Get), arg0)
}

// Source mocks base method.
func (m *MockSourcer) Source(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Source", arg0)
}

// Source indicates an expected call of Source.
func (mr *MockSourcerMockRecorder) Source(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Source", reflect.TypeOf((*MockSourcer)(nil).Source), arg0)
}
