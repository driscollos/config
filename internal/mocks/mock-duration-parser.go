// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/driscollos/config/internal/populator/duration-parser (interfaces: DurationParser)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockDurationParser is a mock of DurationParser interface.
type MockDurationParser struct {
	ctrl     *gomock.Controller
	recorder *MockDurationParserMockRecorder
}

// MockDurationParserMockRecorder is the mock recorder for MockDurationParser.
type MockDurationParserMockRecorder struct {
	mock *MockDurationParser
}

// NewMockDurationParser creates a new mock instance.
func NewMockDurationParser(ctrl *gomock.Controller) *MockDurationParser {
	mock := &MockDurationParser{ctrl: ctrl}
	mock.recorder = &MockDurationParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDurationParser) EXPECT() *MockDurationParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockDurationParser) Parse(arg0 string) (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", arg0)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockDurationParserMockRecorder) Parse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockDurationParser)(nil).Parse), arg0)
}
